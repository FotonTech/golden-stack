name: Golden Stack Server Deploy on Staging

on:
  push:
    branches:
      - master
    paths:
      - 'packages/server/**'
      - 'packages/babel/**'

jobs:
  # TEST SERVER
  test-server:
    name: Test Server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.15'
      - name: Cache MongoDB Binaries
        id: mongoms-binaries
        uses: actions/cache@v1
        with:
          path: ~/.mongodb-binaries
          key: ${{ runner.os }}-v4-2-1-mongoms-binaries
          restore-keys: |
            ${{ runner.os }}-v4-2-1-mongoms-binaries
      - name: Get yarn cache dir
        id: get-yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn.lock
        id: yarn-cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.get-yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: |
          yarn config set unsafe-disable-integrity-migration true -g
          yarn install --frozen-lockfile --production=false --non-interactive --cache-folder $(yarn cache dir)
      - name: Test Server
        run: |
          cp ./packages/server/.env.ci ./packages/server/.env
          yarn test:server --ci --coverage --reporters=jest-junit
        env:
          JEST_SUITE_NAME: 'Golden Stack Server Tests'
          JEST_JUNIT_OUTPUT_DIR: './reports'
          MONGOMS_SYSTEM_BINARY: '~/.mongodb-binaries'
  #      - uses: codecov/codecov-action@v1.0.2
  #        with:
  #          token: ${{ secrets.CODECOV_TOKEN }}

  # DEPLOY SERVER STAGING
  deploy-server-staging:
    name: Deploy Server on Staging
    needs: [test-server]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.15'
      - name: Get yarn cache dir
        id: get-yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn.lock
        id: yarn-cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.get-yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: |
          yarn config set unsafe-disable-integrity-migration true -g
          yarn install --frozen-lockfile --production=false --non-interactive --cache-folder $(yarn cache dir)
      - name: Build Server
        run: |
          cp ./packages/server/.env.staging ./packages/server/.env
          yarn build:server
      - name: Install Now CLI
        run: |
          sudo npm install --global --unsafe-perm now
      - name: Deploy to Now
        run: |
          now --token $ZEIT_TOKEN --local-config .now/now.json --prod --confirm
        env:
          ZEIT_TOKEN: ${{ secrets.ZEIT_TOKEN }}
